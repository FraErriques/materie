USE [materie]
GO
/****** Object:  User [materieUser]    Script Date: 09/02/2019 18:32:41 ******/
CREATE USER [materieUser] FOR LOGIN [applicationuser] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_SEARCH_CandidateDocuments]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_docMulti_SEARCH_CandidateDocuments]
	@id_set varchar( 6000)
as
-- NB. example of how to build this parameter from the application layer:
--declare @id_set varchar( 6000)
--select @id_set = ' (1,2,3)'

declare @query_mainPart varchar( 400)
select @query_mainPart =
'select 
		dm.id,
		c.nominativo as candidato,
		dm.abstract
	from
		[dbo].[docMulti] dm,
		[dbo].[autore]   aut '
	+' where 
		abstract not like ''_##__fake_abstract__##_''
		and dm.ref_autore_id = aut.id '
	--print @query_mainPart
-- decide whether to add an ending part
declare @wholeQuery varchar( 7000)
if( @id_set is not null )
	begin
		select @wholeQuery = @query_mainPart 
		+ ' and dm.id in ' + @id_set 
		+ ' order by abstract'
		--print @wholeQuery
	end
else
	begin
		select @wholeQuery = @query_mainPart + ' order by abstract'
		--print @wholeQuery
	end
-- ready
exec (@wholeQuery)
GO
/****** Object:  Table [dbo].[permesso_LOOKUP]    Script Date: 09/02/2019 18:32:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[permesso_LOOKUP](
	[id] [int] NOT NULL,
	[permissionDescription] [varchar](60) NOT NULL,
 CONSTRAINT [pk_permesso_LOOKUP] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[materia_LOOKUP]    Script Date: 09/02/2019 18:32:40 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[materia_LOOKUP](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[nomeMateria] [varchar](350) NOT NULL,
 CONSTRAINT [pk_materia] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[autore]    Script Date: 09/02/2019 18:32:40 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[autore](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[nominativo] [varchar](150) NOT NULL,
	[note] [text] NULL,
 CONSTRAINT [pk_autore] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_ViewCacher_generic_LOAD_length]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_ViewCacher_generic_LOAD_length]
@view_signature varchar(500)
as
declare @cmd varchar(1500)
select @cmd =
	'select count(*) from ' --NB. [] required around numeric-beginning names.
	+ @view_signature
exec( @cmd)
GO
/****** Object:  StoredProcedure [dbo].[usp_ViewCacher_generic_LOAD_interval]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_ViewCacher_generic_LOAD_interval]
@min int
,@max int
,@view_signature varchar(500)
as
declare @cmd varchar(5500)--NB. no error check. On wrong name, throws.
--
select @cmd = ' select * from '
+ @view_signature
+ ' where RowNumber between  '
+ str( @min)
+ ' and '
+ str( @max)
--
exec( @cmd)
GO
/****** Object:  StoredProcedure [dbo].[usp_ViewCacher_generic_DROP]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_ViewCacher_generic_DROP]
@view_signature varchar(500)
as
declare @cmd varchar(5500)--NB. no error check. On wrong name, throws.
select @cmd = ' drop view ' + @view_signature
exec( @cmd)
GO
/****** Object:  StoredProcedure [dbo].[usp_autore_LOAD]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_autore_LOAD]
@where_tail varchar(5500)
as
declare @code varchar(5500)
if @where_tail is NULL
BEGIN
	select @where_tail = ''
END -- else it's already a valid tail.
select @code =
	'
	select
		aut.id
		,aut.nominativo
		,aut.note
	from 
		autore aut
	'
+ @where_tail
exec( @code)
GO
/****** Object:  StoredProcedure [dbo].[usp_autore_LOAD_nominativo]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_autore_LOAD_nominativo]
	@id int
as
select 
	aut.nominativo
from 
	autore aut
where
	aut.id = @id
GO
/****** Object:  Table [dbo].[utente]    Script Date: 09/02/2019 18:32:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[utente](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[username] [varchar](50) NOT NULL,
	[password] [varchar](50) NOT NULL,
	[kkey] [varchar](150) NULL,
	[mode] [char](1) NOT NULL,
	[ref_permissionLevel_id] [int] NOT NULL,
 CONSTRAINT [pk_utente_materie] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[username] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_materia_LOOKUP_LOAD]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE procedure [dbo].[usp_materia_LOOKUP_LOAD]
as
select * from [dbo].[materia_LOOKUP]
order by nomeMateria   asc
GO
/****** Object:  StoredProcedure [dbo].[usp_materia_LOOKUP_INSERT]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_materia_LOOKUP_INSERT]
@nomeMateria varchar(350)
as
insert into [materia_LOOKUP] (
-- id
nomeMateria
	) values(
@nomeMateria
)
GO
/****** Object:  StoredProcedure [dbo].[usp_autore_INSERT]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_autore_INSERT]
	-- id
	@nominativo varchar(150)
	,@note text
as
insert into autore(
	-- id
	nominativo
	,note
)values(
	-- id
	@nominativo
	,@note
)
GO
/****** Object:  StoredProcedure [dbo].[usp_autore_note_UPDATE]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_autore_note_UPDATE]
@id int,
@note text
as
	update
		[autore]
	set
		[note]=@note
	where id = @id
GO
/****** Object:  StoredProcedure [dbo].[usp_autore_note_LOAD]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_autore_note_LOAD]
@id int
as
select
	[note]
from
	autore
where id = @id
GO
/****** Object:  Table [dbo].[docMulti]    Script Date: 09/02/2019 18:32:40 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[docMulti](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ref_job_id] [int] NOT NULL,
	[ref_autore_id] [int] NOT NULL,
	[ref_materia_id] [int] NOT NULL,
	[abstract] [text] NOT NULL,
	[sourceName] [varchar](550) NOT NULL,
	[doc] [image] NULL,
	[insertion_time] [datetime] NULL,
 CONSTRAINT [pk_docMulti] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[LogViewer_web_materie]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[LogViewer_web_materie]
	@startDate varchar(14),
	@endDate varchar(14)
as
select
	--[when] as full_timestamp,
	substring([when], 1,4) as [anno],
	case
		when substring([when], 5,2)=1 then 'Gennaio'
		when substring([when], 5,2)=2 then 'Febbraio'
		when substring([when], 5,2)=3 then 'Marzo'
		when substring([when], 5,2)=4 then 'Aprile'
		when substring([when], 5,2)=5 then 'Maggio'
		when substring([when], 5,2)=6 then 'Giugno'
		when substring([when], 5,2)=7 then 'Luglio'
		when substring([when], 5,2)=8 then 'Agosto'
		when substring([when], 5,2)=9 then 'Settembre'
		when substring([when], 5,2)=10 then 'Ottobre'
		when substring([when], 5,2)=11 then 'Novembre'
		when substring([when], 5,2)=12 then 'Dicembre'
		else 'Invalid Month'
	end   as month_name,
	--substring([when], 5,2) as [mese], if you want month-ordinal instead of month-name.
	substring([when], 7,2) as [giorno],
	substring([when], 9,2)+':'+substring([when], 11,2) as [ora_minuto],
	substring([when],13,2) as [secondo],
	function_name as procedure_called,
	content	as [message],
	-- campi tecnici per il debug su server
	row_nature,
	stack_depth
from
	[Logging].[dbo].[materie_log]--hard to let it a parameter; the whole query should become a string of dynamic sql.
where 
	convert(datetime,substring([when],1,8))>=convert(datetime,@startDate)
	and convert(datetime,substring([when],1,8))<=convert(datetime,@endDate)
	--and row_nature='t'
order by [when] desc
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_INSERT]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_docMulti_INSERT]
	@ref_job_id int,---------NB. must be specified and !=0, on Append.------------------------
	@ref_autore_id int,
	@ref_materia_id int,
	@_abstract text,
	@sourceName varchar(550),
	@doc image,
	-- out
	@result int out -- output the generated id_identity.---------
as
	begin transaction
	begin try
		if @ref_job_id<0--preserve zero, for the first_insert.----
			begin
			    -- RAISERROR with severity 11-19 will cause exeuction to jump to the CATCH block.
				RAISERROR( '---NB. @ref_job_id ----- must be specified and >=0. Zero on first_insert, positive on Append.',
						   16, -- Severity. -- RAISERROR with severity 11-19 will cause exeuction to jump to the CATCH block.
						   1 -- State.
						   );
			end--end if @ref_job_id<=0 else can continue.
		insert into docMulti(
			--id identity
			ref_job_id,
			ref_autore_id,
			ref_materia_id,
			abstract,
			sourceName,
			doc
				) values(
				--id identity,
				@ref_job_id,------------NB. must be specified end !=0, on Append.---------
				@ref_autore_id,--it's a foreign key: cannot be an invalid pointer.------------
				@ref_materia_id,--it's a foreign key: cannot be an invalid pointer.------------
				@_abstract,-----last chunk will be the only one equipped with. The semantic engine must find last chunk's id.
				@sourceName,--every chunk.----
				@doc
		)
		-- now retrieve the "id_identity" just created, to use it as ref_job_id in successive chunks.
		select @result = (select max(id) from docMulti)
		-- if you get here, you can commit.
		commit transaction
	end try
	begin catch
		rollback transaction
		select @result=-1 --error code
	end catch
	-- ready
	return @result
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_getId_at_refAutoreId]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_docMulti_getId_at_refAutoreId]
	@ref_autore_id int
as
select 
	dm.id 
	,mat.nomeMateria
	,dm.abstract
	,dm.sourceName
	,dm.insertion_time
from 
	docMulti dm
	, autore aut
	, materia_LOOKUP mat
where 
	ref_autore_id = @ref_autore_id
	and abstract not like '_##__fake_abstract__##_'
	and aut.id=dm.ref_autore_id
	and mat.id = dm.ref_materia_id
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_getBlobAtId]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_docMulti_getBlobAtId]
	@id_required_phase int
as
	-- returns a datatable of all columns, at id=@id_required_phase.
	select * from docMulti where id=@id_required_phase
	--ready
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_get_sourceName]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_docMulti_get_sourceName]
	@id int
as
select sourceName from docMulti where id=@id
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_dataMining]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_docMulti_dataMining]
	@id_last_phase int
as
	-- returns a datatable of ids, from last_chunk(in first row) to first_chunk(ref_job_id=0 in last row).--
	declare @ref_job_id int
	set @ref_job_id = @id_last_phase
	--
	select @ref_job_id -- NB. don't forget the last chunk.
	--
	while( @ref_job_id>0)
		begin
			-----------finalizzata a memorizzare la sequenza dei puntatori a chunk.-----------
			select ref_job_id from docMulti where id=@ref_job_id
			-----
			-----------stessa query di prima, con nuovo parametro,----------------------------
			-----------per far avanzare il ciclo while al chunk successivo--------------------
			select @ref_job_id = (select ref_job_id from docMulti where id=@ref_job_id)
			-----
		end
	--ready
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_abstract_UPDATE]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_docMulti_abstract_UPDATE]
@id int,
@_abstract text
as
	update
		[docMulti]
	set
		[abstract]=@_abstract
	where id = @id
GO
/****** Object:  StoredProcedure [dbo].[usp_docMulti_abstract_LOAD]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_docMulti_abstract_LOAD]
@id int
as
select
	[abstract]
from
	[docMulti]
where id = @id
GO
/****** Object:  Table [dbo].[lCrash]    Script Date: 09/02/2019 18:32:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[lCrash](
	[id] [int] NOT NULL,
	[card] [int] NOT NULL,
 CONSTRAINT [pk_lCrash] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[usp_utente_LOADSINGLE]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[usp_utente_LOADSINGLE]
	@username varchar(50)
as
	select
		*
	from utente
	where username=@username
GO
/****** Object:  StoredProcedure [dbo].[usp_utente_LOADDECODEDSINGLE]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[usp_utente_LOADDECODEDSINGLE]
	@id int
as
	select
		username
	from utente
	where id=@id
GO
/****** Object:  StoredProcedure [dbo].[usp_utente_INSERT]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   procedure [dbo].[usp_utente_INSERT]
	@username				varchar(50),
	@password				varchar(50),
	@kkey					varchar(150),
	@mode					char(1),
	@ref_permissionLevel_id int
as
insert into utente(
--id
[username],
[password],
[kkey],
[mode],
[ref_permissionLevel_id]
       ) values(
--id
@username,
@password,
@kkey,
@mode,
@ref_permissionLevel_id
)
GO
/****** Object:  StoredProcedure [dbo].[usp_utente_ChangePwd]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
create   procedure [dbo].[usp_utente_ChangePwd]
	@username varchar(50),
	@password varchar(50),
	@kkey     varchar(150),
	@mode     char(1)
as
UPDATE utente
SET
		password=@password,
		kkey=@kkey,
		mode=@mode
WHERE
	username=@username
GO
/****** Object:  StoredProcedure [dbo].[usp_permesso_LOADSINGLE]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_permesso_LOADSINGLE]
	@username varchar(50)
as
-- datatable utente
select  	
	ut.id id_utente
	, ut.username username
	,p.permissionDescription  livelloAccesso
from 
	utente ut
	,permesso_LOOKUP p
where 
	ut.username =  @username
	and ut.ref_permissionLevel_id=p.id
GO
/****** Object:  StoredProcedure [dbo].[usp_autore_LOAD_search]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_autore_LOAD_search]
as
select
	dm.id as doc
	,aut.id as autore
	, aut.nominativo
	, dm.abstract
	, dm.insertion_time
from
	docMulti	dm
	, autore aut
where 
	abstract not like '_##__fake_abstract__##_'
	and dm.ref_autore_id = aut.id
order by
	insertion_time desc
GO
/****** Object:  StoredProcedure [dbo].[usp_lCrash_UPDATE]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_lCrash_UPDATE]
	@id int,
	@card int
as
	update  [dbo].[lCrash]
		set card=@card
	where id=@id
GO
/****** Object:  StoredProcedure [dbo].[usp_lCrash_LOADSINGLE]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_lCrash_LOADSINGLE]
	@id int
as
	select card from lCrash
	where id=@id
GO
/****** Object:  StoredProcedure [dbo].[usp_lCrash_INSERT]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_lCrash_INSERT]
	@id int,
	@card int
as
	if @card is not null
	begin
		insert into [dbo].[lCrash](
			id,
			card
			) values(
				@id,
				@card
			)
	end
	else
	begin
		insert into [dbo].[lCrash](
			id
			) values(
				@id
				-- card defaults to zero
			)
	end
GO
/****** Object:  StoredProcedure [dbo].[usp_lCrash_CheckLine]    Script Date: 09/02/2019 18:32:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[usp_lCrash_CheckLine]
	@id int
as
	declare @res int
	select @res = (select count(id) from [dbo].[lCrash]	where id=@id)
	return @res
GO
/****** Object:  Default [DF__docMulti__ref_jo__4D94879B]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[docMulti] ADD  DEFAULT ((0)) FOR [ref_job_id]
GO
/****** Object:  Default [DF__docMulti__insert__4E88ABD4]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[docMulti] ADD  DEFAULT (getdate()) FOR [insertion_time]
GO
/****** Object:  Default [DF__lCrash__card__3A81B327]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[lCrash] ADD  DEFAULT ((0)) FOR [card]
GO
/****** Object:  Default [DF__utente__mode__3C69FB99]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[utente] ADD  DEFAULT ('o') FOR [mode]
GO
/****** Object:  ForeignKey [fk_docMulti_autore]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[docMulti]  WITH CHECK ADD  CONSTRAINT [fk_docMulti_autore] FOREIGN KEY([ref_autore_id])
REFERENCES [dbo].[autore] ([id])
GO
ALTER TABLE [dbo].[docMulti] CHECK CONSTRAINT [fk_docMulti_autore]
GO
/****** Object:  ForeignKey [fk_docMulti_materia]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[docMulti]  WITH CHECK ADD  CONSTRAINT [fk_docMulti_materia] FOREIGN KEY([ref_materia_id])
REFERENCES [dbo].[materia_LOOKUP] ([id])
GO
ALTER TABLE [dbo].[docMulti] CHECK CONSTRAINT [fk_docMulti_materia]
GO
/****** Object:  ForeignKey [fk_lCrash]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[lCrash]  WITH CHECK ADD  CONSTRAINT [fk_lCrash] FOREIGN KEY([id])
REFERENCES [dbo].[utente] ([id])
GO
ALTER TABLE [dbo].[lCrash] CHECK CONSTRAINT [fk_lCrash]
GO
/****** Object:  ForeignKey [fk_utente_permesso]    Script Date: 09/02/2019 18:32:40 ******/
ALTER TABLE [dbo].[utente]  WITH CHECK ADD  CONSTRAINT [fk_utente_permesso] FOREIGN KEY([ref_permissionLevel_id])
REFERENCES [dbo].[permesso_LOOKUP] ([id])
GO
ALTER TABLE [dbo].[utente] CHECK CONSTRAINT [fk_utente_permesso]
GO
