<%@ Application Language="C#" %>

<script runat="server">


    void Application_Start(object sender, EventArgs e)
    {
        // Code that runs on application startup
        //
        LogSinkFs.Wrappers.LogWrappers.SectionContent(
            "Prima chiamata dopo il riavvio del WebServer IIS  ",
            1
        );
        LogSinkDb.Wrappers.LogWrappers.SectionContent(
            "Prima chiamata dopo il riavvio del WebServer IIS  ",
            1
        );
    }//


    void Application_End(object sender, EventArgs e)
    {
        //  Code that runs on application shutdown
        //
        LogSinkFs.Wrappers.LogWrappers.SectionContent(
            "Arresto del WebServer IIS  ",
            1
        );
        LogSinkDb.Wrappers.LogWrappers.SectionContent(
            "Arresto del WebServer IIS  ",
            1
        );
    }//


    void Application_Error(object sender, EventArgs e)
    {
        // Code that runs when an unhandled error occurs
        //
        object errore = null;
        try
        {
            errore = this.Session["errore"];
            string msgCache =
                " L'applicazione richiede l'uso dei collegamenti contenuti nei menu', per il cambio di pagina."
                + " Non e' supportato l'uso dei tasti indietro-avanti del browser, in quanto le pagine devono"
                + " essere rinnovate dal server e non prese dalla cache del browser.";
            if (null == errore)// do not publish error detail to users.
            {// write from scratch.
                this.Session["errore"] = "  __Ridirezione da Global.asax. " + msgCache;
            }
            else// append.
            {
                this.Session["errore"] += "  __Ridirezione da Global.asax. " + msgCache;// append.
            }//
            //----administrator's error details, on the logs.
            int errorCardinality = System.Web.HttpContext.Current.AllErrors.Length;
            for (int scalarError = 0; scalarError < errorCardinality; scalarError++)
            {
                LoggingToolsContainerNamespace.LoggingToolsContainer.LogBothSinks_DbFs(
                    "  __Ridirezione da Global.asax. Ex = " +
                    System.Web.HttpContext.Current.AllErrors[scalarError].InnerException.Message +
                    System.Web.HttpContext.Current.AllErrors[scalarError].InnerException.StackTrace,
                    2
                    );
            }// end for each error.            
        }
        catch (System.Exception ex)// all; on some errors this.Session is not available and its query causes an exception.
        {
            LoggingToolsContainerNamespace.LoggingToolsContainer.LogBothSinks_DbFs(
                ex.Message,
                2
            );
        }
        // ready.
        this.Response.Redirect("~/errore.aspx");
    }//


    void Session_Start(object sender, EventArgs e)
    {
        // Code that runs when a new session is started
        //
        this.Session["currentPage"] = "Global.asax::Session_Start";// Timbro manages it.
        this.Session["IsReEntrant"] = false;// Timbro manages it.
        //
        LogSinkFs.Wrappers.LogWrappers.SectionContent(
            "Apertura della Sessione per  " +
            " IP client=" + this.Request.UserHostAddress +
            " SessionId=" + this.Session.SessionID,
            1);
        LogSinkDb.Wrappers.LogWrappers.SectionContent(
            "Apertura della Sessione per  " +
            " IP client=" + this.Request.UserHostAddress +
            " SessionId=" + this.Session.SessionID,
            1);
    }//



    void Session_End(object sender, EventArgs e)
    {
        // Code that runs when a session ends. 
        // Note: The Session_End event is raised only when the sessionstate mode
        // is set to InProc in the Web.config file. If session mode is set to StateServer 
        // or SQLServer, the event is not raised.
        // no matter the int_result; it's !=0, also onSuccess.
        Entity_materie.Proxies.usp_ViewCacher_generic_DROP_SERVICE.usp_ViewCacher_generic_DROP(
            ViewNameDecorator.ViewNameDecorator_SERVICE( this.Session.SessionID ) // delete view, generated by this.Session.
        );
        //
        LogSinkFs.Wrappers.LogWrappers.SectionContent(
            "Chiusura della Sessione per  " +
            " SessionId=" + this.Session.SessionID,
            1);
        LogSinkDb.Wrappers.LogWrappers.SectionContent(
            "Chiusura della Sessione per  " +
            " SessionId=" + this.Session.SessionID,
            1);
    }//
    
           
</script>
